Notes on the safe implementation of macros
========================================== 

NB. This is nonsense! Don't trust the information here

Variadic macros
---------------

  #define MY_MACRO(FORMAT, ARGS...) O_debug(FORMAT , ##ARGS)

In the above code the ## is necessary so that if no extra arguments are supplied
the preceding comma is removed.

Also note that there is a space before the comma, this is necessary or the ##
does not work.

  #define MY_MACRO(FUNCTION_NAME, ARGS...) FUNCTION_NAME(ARGS)

In the above code we could still use the ## but it gives an annoying warning
as there is no valid token before it for removal so we shouldn't use it

Argument passing
----------------

In order to support #defined values being passed into macros the following
construction is used:

  #define _MY_MACRO(FORMAT, ARGS...) O_debug(FORMAT , ##ARGS)
  #define MY_MACRO(FORMAT, ARGS...) _MY_MACRO(FORMAT , ##ARGS)

This extra level of indirection allows calls like this:

  #define FORMAT	"Hello, %s!\n"
  MY_MACRO(FORMAT, "world");

Without the indirection the above would not compile as FORMAT would be used
in the O_debug call without expansion (and it is not a valid string or variable)

Sometimes we need another level of indirection as in the following example

  #define __MY_MACRO(FORMAT, ARGS...) O_debug(FORMAT , ##ARGS)
  #define _MY_MACRO(FORMAT, ARGS...) __MY_MACRO(FORMAT , ##ARGS)
  #define MY_MACRO(ARGS...) _MY_MACRO(STANDARD_FORMAT , ##ARGS)

We may do this if we want to have a standard parameter defined that can then
be used in multiple macros and/or macro calls as in the following example

  #define STANDARD_FORMAT	"Hello, %s!\n"
  MY_MACRO("world");
  MY_MACRO("other worlds");
