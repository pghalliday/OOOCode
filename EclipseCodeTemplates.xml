<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="false" context="org.eclipse.cdt.core.cHeader.contenttype_context" deleted="false" description="" enabled="true" name="OOOCode Class header template">#ifndef ${include_guard_symbol}&#13;
#define ${include_guard_symbol}&#13;
&#13;
#include "OOOCode.h"&#13;
&#13;
#define OOOClass ${file_base}&#13;
OOODeclare(int nMyField)&#13;
	OOOImplements&#13;
		OOOImplement(I${file_base});&#13;
	OOOImplementsEnd&#13;
	OOOExports&#13;
		OOOExport(int, getMyField);&#13;
	OOOExportsEnd&#13;
OOODeclareEnd&#13;
#undef OOOClass&#13;
&#13;
#endif&#13;
</template><template autoinsert="false" context="org.eclipse.cdt.core.cHeader.contenttype_context" deleted="false" description="" enabled="true" name="OOOCode Interface header template">#ifndef ${include_guard_symbol}&#13;
#define ${include_guard_symbol}&#13;
&#13;
#include "OOOCode.h"&#13;
&#13;
#define OOOInterface ${file_base}&#13;
OOOVirtuals&#13;
	OOOVirtual(int, getData);&#13;
OOOVirtualsEnd&#13;
#undef OOOInterface&#13;
&#13;
#endif&#13;
</template><template autoinsert="false" context="org.eclipse.cdt.core.cSource.contenttype_context" deleted="false" description="" enabled="true" name="OOOCode Class source template">#include "${file_base}.h"&#13;
&#13;
#define OOOClass ${file_base}&#13;
&#13;
/* Declare any private data fields here */&#13;
OOOPrivateData&#13;
	int nMyField;&#13;
OOOPrivateDataEnd&#13;
&#13;
OOODestructor&#13;
{&#13;
	/* release any assigned memory here */&#13;
}&#13;
OOODestructorEnd&#13;
&#13;
/* sample method */&#13;
OOOMethod(int, getMyField)&#13;
{&#13;
	/* return a private field */&#13;
	return OOOF(nMyField);&#13;
}&#13;
OOOMethodEnd&#13;
&#13;
/* another sample method */&#13;
OOOMethod(int, getData)&#13;
{&#13;
	/* make a private method call */&#13;
	return OOOC(getMyField);&#13;
}&#13;
OOOMethodEnd&#13;
&#13;
OOOConstructor(int nMyfield)&#13;
{&#13;
	/* interface mapping*/&#13;
#define OOOInterface I${file_base}&#13;
	OOOMapVirtuals&#13;
		OOOVirtualMapping(getData)&#13;
	OOOMapVirtualsEnd&#13;
#undef OOOInterface&#13;
&#13;
	/* export mapping */&#13;
	OOOMapMethods&#13;
		OOOMethodMapping(getMyField)&#13;
	OOOMapMethodsEnd&#13;
&#13;
	/* initialise a private field */&#13;
	OOOF(nMyField) = nMyField;&#13;
}&#13;
OOOConstructorEnd&#13;
&#13;
#undef OOOClass&#13;
</template></templates>